{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Tests whether a collection contains at least `n` elements which pass a test implemented by a predicate function, iterating from right to left.\n*\n* @param {Collection} collection - input collection\n* @param {PositiveInteger} n - number of elements\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} second argument must be a positive integer\n* @throws {TypeError} third argument must be a function\n* @returns {boolean} boolean indicating whether a collection contains at least `n` elements which pass a test\n*\n* @example\n* function isNegative( v ) {\n*     return ( v < 0 );\n* }\n*\n* var arr = [ -1, 1, -2, 3, 4 ];\n*\n* var bool = someByRight( arr, 2, isNegative );\n* // returns true\n*/\nfunction someByRight( collection, n, predicate, thisArg ) {\n\tvar count;\n\tvar out;\n\tvar len;\n\tvar i;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a collection. Value: `%s`.', collection ) );\n\t}\n\tif ( !isPositiveInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', n ) );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tlen = collection.length;\n\tcount = 0;\n\tfor ( i = len-1; i >= 0; i-- ) {\n\t\tout = predicate.call( thisArg, collection[ i ], i, collection );\n\t\tif ( out ) {\n\t\t\tcount += 1;\n\t\t\tif ( count === n ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t// Account for dynamically resizing a collection...\n\t\tif ( len !== collection.length ) {\n\t\t\ti += ( collection.length - len );\n\t\t\tlen = collection.length;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default someByRight;\n"],"names":["someByRight","collection","n","predicate","thisArg","count","len","i","isCollection","TypeError","format","isPositiveInteger","isFunction","length","call"],"mappings":";;wYAoDA,SAASA,EAAaC,EAAYC,EAAGC,EAAWC,GAC/C,IAAIC,EAEAC,EACAC,EACJ,IAAMC,EAAcP,GACnB,MAAM,IAAIQ,UAAWC,EAAQ,sEAAuET,IAErG,IAAMU,EAAmBT,GACxB,MAAM,IAAIO,UAAWC,EAAQ,6EAA8ER,IAE5G,IAAMU,EAAYT,GACjB,MAAM,IAAIM,UAAWC,EAAQ,oEAAqEP,IAInG,IADAE,EAAQ,EACFE,GAFND,EAAML,EAAWY,QAEH,EAAGN,GAAK,EAAGA,IAAM,CAE9B,GADMJ,EAAUW,KAAMV,EAASH,EAAYM,GAAKA,EAAGN,KAElDI,GAAS,KACMH,EACd,OAAO,EAIJI,IAAQL,EAAWY,SACvBN,GAAON,EAAWY,OAASP,EAC3BA,EAAML,EAAWY,OAElB,CACD,OAAO,CACR"}